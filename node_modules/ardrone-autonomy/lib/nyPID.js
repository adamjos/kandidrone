module.exports = nyPID;
function nyPID(kp, ki, kd) {
    this.configure(kp, ki, kd);
    this.reset();
}

nyPID.prototype.configure = function(kp,ki,kd) {
    this._kp = kp;
    this._ki = ki;
    this._kd = kd;
}

nyPID.prototype.reset = function() {
    this._last_time = 0;
    this._last_error = Infinity;
    this._last_error_2 = Infinity;
    this._error_sum = 0;
    this._last_command = Infinity;
}

nyPID.prototype.getCommand = function(e) {
    // Compute dt in seconds
    var time = Date.now();
    var dt = (time - this._last_time) / 1000
    

    var de = e;
    var esum = e;
    var ekon = e;
    if (this._last_time != 0) {
        // Compute de (error derivation)
        if (this._last_error < Infinity) {
            de = e - this._last_error;
            esum = e + this._last_error;
        }
        

        if (this._last_error_2 < Infinity && this._last_error < Infinity) {
            ekon = e - (2 * this._last_error) + this._last_error_2; 
        }
        else if (this._last_error < Infinity) {
            ekon = e - (2 * this._last_error); 
        }


    }



    // Update our trackers
    this._last_time = time;
    this._last_error_2 = this._last_error;
    this._last_error = e;
    

    // Compute commands

    var command = (this._kp * de)
                + (this._ki * esum * (dt/2))
                + (this._kd * ekon / dt);

    if (this._last_command < Infinity) {
        command = command + this._last_command;
    } 

    this._last_command=command;

    return command;
}
